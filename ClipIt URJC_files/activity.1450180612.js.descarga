
//<script>
elgg.provide('clipit.task');
elgg.provide('clipit.task.admin');
clipit.task.init = function() {
    $(document).on("click", ".feedback-check", clipit.task.feedbackCheck);
    $(document).on("click", "#add_task", clipit.task.addTask);
    // Task templates
    $(document).on("change", "#select-task-template", clipit.task.loadTemplate);

    // Rubric task
    $(document).on("click", ".rubric-refresh", clipit.task.rubricRefreshList);
    $(document).on("click", ".rubric-select", clipit.task.rubricSelect);
    $(document).on("click", ".rubric-unselect", clipit.task.rubricUnselect);
    // Quiz task
    $(document).on("click", ".quiz-refresh", clipit.task.quizRefreshList);
    $(document).on("click", ".quiz-select", clipit.task.quizSelect);
    $(document).on("click", ".quiz-unselect", clipit.task.quizUnselect);

    $(document).on("click", ".btns-task-select .thumbnail:not(.selected)", clipit.task.onSelect);
};
elgg.register_hook_handler('init', 'system', clipit.task.init);
clipit.task.admin.init = function() {
};
elgg.register_hook_handler('init', 'system', clipit.task.admin.init);


clipit.task.admin.fullCalendarSetDefault = function(){
    return  {
        monthNames: JSON.parse(elgg.echo('calendar:month_names')),
        monthNamesShort: JSON.parse(elgg.echo('calendar:month_names_short')),
        dayNames: JSON.parse(elgg.echo('calendar:day_names')),
        dayNamesShort: JSON.parse(elgg.echo('calendar:day_names_short')),
        dayNamesMin: JSON.parse(elgg.echo('calendar:day_names_min')),
        buttonText: {
            month: elgg.echo('calendar:month'),
            week: elgg.echo('calendar:week'),
            day: elgg.echo('calendar:day'),
            list: elgg.echo('calendar:agenda')
        }
    };
};

clipit.task.feedbackCheck = function(){
    var parent = $(this).closest(".task"),
        feedback_content = parent.find(".feedback_form"),
        that = $(this);
    if($(this).find("input").is(':checked')){
        var task_end = parent.find(".input-task-end").val();
        if(task_end.length > 0){
            task_end = moment(task_end, 'DD/MM/YY').hour(0).minute(0).format('DD/MM/YY HH:mm');
            feedback_content.find(".input-task-start").val(task_end);
        }
        feedback_content.show().find('.task-type-container').fadeIn('fast');
//        feedback_content
//            .show()
//            .find(".input-task-title")
//            .focus();
        // Show rubric list
        clipit.task.rubricList(feedback_content);
    } else {
        feedback_content.hide();
    }
};

clipit.task.rubricList = function($task){
    var container = $task.find(".rubric-select-list"),
        input_prefix = $task.find("input[name='input_prefix']"),
        input_prefix_val = '';
    if(input_prefix.length > 0){
//        input_prefix_val = input_prefix.val()+'[feedback-form]';
        input_prefix_val = input_prefix.val();
    }
    container.html('<i class="fa fa-spinner fa-spin fa-2x blue"></i>').fadeIn('fast');
    elgg.get('ajax/view/rubric/list', {
        data: {
            'select': true,
            'input_prefix': input_prefix_val
        },
        success: function (data) {
            container.html(data);
        }
    });
};
clipit.task.rubricRefreshList = function(){
    clipit.task.rubricList($(this).closest('.task'));
};
clipit.task.rubricSelect = function(){
    var task_container = $(this).closest('.rubric-select-list'),
        rubric_id = $(this).closest('tr').attr('id');
    task_container.find('table tr').not('#'+ rubric_id).fadeOut(300, function(){$(this).remove();});
    task_container.find('.input-rubric-id').val(rubric_id);
    // Change button to unselect type
    $(this).removeClass('rubric-select')
        .addClass('rubric-unselect btn-border-red')
        .text(elgg.echo('btn:remove'));
};
clipit.task.rubricUnselect = function(){
    clipit.task.rubricList($(this).closest('.task'));
};

clipit.task.quizRefreshList = function(){
    clipit.task.refresh($(this).closest('.task'));
};

clipit.task.quizSelect = function(){
    var task_container = $(this).closest('.task-type-container'),
        quiz_id = $(this).closest('tr').attr('id');
    task_container.find('table tr').not('#'+ quiz_id).fadeOut(300, function(){$(this).remove();});
    task_container.find('.input-quiz-id').val(quiz_id);
    // Change button to unselect type
    $(this).removeClass('quiz-select')
        .addClass('quiz-unselect btn-border-red')
        .text(elgg.echo('btn:remove'));
};
clipit.task.quizUnselect = function(){
    clipit.task.refresh($(this).closest('.task'));
};
clipit.task.addTask = function(){
    var content = $(".task-list"),
        loading = $('<i class="fa fa-spinner fa-spin fa-2x blue-lighter" style="padding:15px;"/>').appendTo(content);
    $.get( "ajax/view/activity/create/task_list", function( data ) {
        loading.remove();
        content.append(data);
    });
};
// Admin task functions
clipit.task.admin.fullCalendar = function(data){
    return $.extend(data.messages, {
        firstDay: 1,
            header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
        },
        eventAfterAllRender: function(){
            var content = $(".fc-header-left, .fc-header-right");
            content.find('.fc-header-space').remove();
            content.removeClass().addClass("btn-group btn-group-sm")
                .find('.fc-button').removeClass()
                .addClass("btn btn-default btn-border-blue");
            content.find('.fc-icon-right-single-arrow').removeClass().addClass("fa fa-caret-right")
            content.find('.fc-icon-left-single-arrow').removeClass().addClass("fa fa-caret-left");
            $(".fc-header td:eq(0)").addClass('pull-left');
            $(".fc-header td:eq(2)").addClass('pull-right');
        },
        editable: false,
        events: data.events,
        eventRender: function(event, element) {
            $(element).find(".fc-event-inner").prepend($(event.icon).removeClass('blue').addClass('margin-right-10 margin-left-5'));
        },
        eventClick: function(event, calEvent, jsEvent, view, element) {
            $("[data-target='#edit-task-"+event.id+"']").click();
        },
        dayRender: function(date, cell) {
            var date_formated = date.add(-2, 'hours').format("X"); // Added -2hours T00:00:00
            var data_start = data.start-(60*60*4);
            if(date_formated >= data_start && date_formated <= data.end ){
                $(cell).addClass('fc-ranged');
            }
        },
        dayClick: function(date, jsEvent, view) {
            var date_formated = date.add(+2, 'hours').format("X"); // Added +2hours T00:00:00
            var data_end = data.end+(60*60*4);
            if(date_formated >= data.start && date_formated <= data_end ){
                date.hour(0).minute(0);
                var new_task_modal = $("#create-new-task");
                new_task_modal.modal('show');
                new_task_modal.find(".input-task-start").val(date.format('DD/MM/YY HH:mm'));
                new_task_modal.find(".input-task-end").val('');
            } else {
                return false;
            }
        }
    });
};
clipit.task.selectTest = function(hook, type, params, value){
    if(params.type == 'quiz_take'){
        var $task = params.element,
            $container = params.container;

        elgg.get('ajax/view/quiz/list', {
            data: {
                'activity_create': true,
                'tricky_topic': params.tricky_topic,
                'input_prefix': params.input_prefix
            },
            success: function (data) {
                $container.html(data).show();
            }
        });
    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectTest);

clipit.task.selectResource_download = function(hook, type, params, value){
    if(params.type == 'resource_download'){
        var $task = params.element,
            $container = params.container;
        elgg.get('ajax/view/multimedia/attach/list', {
            success: function (data) {
                $container.html(data).show();
                $container.prepend('<p><strong>'+elgg.echo('task:resource_download:select')+'</strong></p>');
                var $attach_list = $container.find('.attach_list');
                $attach_list.show();
                $attach_list.attach_multimedia({
                    data: {
                        'entity_id': (params.entity_id ? params.entity_id : params.tricky_topic),
                        'input_prefix': params.input_prefix
                    }
                }).loadBy("files");
            }
        });

    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectResource_download);

clipit.task.selectOther = function(hook, type, params, value){
    if(params.type == 'other'){
        var $task = params.element,
            $container = params.container;
        $container.html('').hide();
    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectOther);

clipit.task.selectText_upload = function(hook, type, params, value){
    if(params.type == 'text_upload'){
        var $task = params.element,
            $container = params.container,
            $feedback_task = $task.find('.feedback_task');;
        $container.html('').hide();
        $task.find('.feedback-module').fadeIn('fast');
        $feedback_task.find('.feedback-task-type').val('text_upload');
    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectText_upload);

clipit.task.selectVideo_upload = function(hook, type, params, value){
    if(params.type == 'video_upload'){
        var $task = params.element,
            $container = params.container,
            $feedback_task = $task.find('.feedback_task');
        $container.hide();
        $task.find('.feedback-module').fadeIn('fast');
        $feedback_task.find('.feedback-task-type').val('video_feedback');
    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectVideo_upload);

clipit.task.selectFile_upload = function(hook, type, params, value){
    if(params.type == 'file_upload'){
        var $task = params.element,
            $container = params.container,
            $feedback_task = $task.find('.feedback_task');
        $container.hide();
        $task.find('.feedback-module').fadeIn('fast');
        $feedback_task.find('.feedback-task-type').val('file_feedback');
    }
    return value;
};
elgg.register_hook_handler('clipit:task:type', 'system', clipit.task.selectFile_upload);

clipit.task.onSelect = function(e){
    e.preventDefault();
    var task_type = $(this).data('task-type'),
        $form = $(this).closest('form'),
        $task = $(this).closest('.task'),
        $container = $task.find(".main_task .task-type-container"),
        defaults = {
            'id': $(this).data('task-type').replace('#', ''),
            'element': $task,
            'type': task_type,
            'container': $container
        },
        data = {};
    // default settings
    $container.hide().html('');
    if(task_type != 'video_upload' && task_type != 'file_upload') {
        $task.find('.feedback-module').hide();
        $task.find('.feedback-module').find('input').prop('checked', false);
        $task.find('.feedback_form').hide();
    }

    $(this).find('input[type="radio"]').prop('checked', true);

    if($("#tricky-topic").val() != ''){
        data.tricky_topic = $("#tricky-topic").val();
    }
    if($task.find("input[name='input_prefix']").length > 0){
        data.input_prefix = $task.find("input[name='input_prefix']").val();
    }
    if($form.find("input[name='entity-id']").length > 0){
        data.entity_id = $form.find("input[name='entity-id']").val();
    }

    var params = $.extend({}, defaults, data);
    $(this).closest('.btns-task-select').find('.thumbnail.active').removeClass('active');
    $(this).addClass('active');
    $container.fadeIn('fast').html('<i class="fa fa-spinner fa-spin fa-2x blue"></i>');
    // Advanced options
    var $options_container = $task.find('.task-advanced-options'),
        $options = $options_container.filter('[data-options="'+ task_type +'"]');
    $options_container.find('.task-advanced-options-collapse').addClass('collapse').removeClass('in');
    $options_container.hide().find('.select-options').hide();
    if($options.length > 0){
        $options.fadeIn('slow');
        $options.show();
    }
    // Trigger task type event
    elgg.trigger_hook('clipit:task:type', 'system', params, "");
};
clipit.task.refresh = function($task){
    $task.find('.btns-task-select .active').click();
};

var task_template = [];
clipit.task.getTemplates = function(){
    task_template = elgg.trigger_hook('clipit:task:template', 'system');
    for(name in task_template){
        $('#select-task-template').append('<option value="'+ name +'">'+ task_template[name].name[elgg.get_language()] +'</option>');
    }
};
clipit.task.echoTemplate = function(message){
    var language = elgg.get_language(),
        default_language = 'en';
    if(message[language] == undefined){
        return message[default_language];
    }
    return message[language];
};
clipit.task.countTemplateTasks = function(json){
    var count = 0;
    for (i in json.tasks){
        count++;
        if(json.tasks[i].feedback != undefined) {
            count++;
        }
    }
    return count;
};
clipit.task.setTemplateDates = function(date, $element_start, $element_end){
    var start_minutes = Math.floor(moment.unix(date.start).minute()/15)*15,
        end_minutes = Math.floor(moment.unix(date.end).minute()/15)*15;
    $element_start.val(moment.unix(date.start).minute(start_minutes).format('DD/MM/YYYY HH:mm'))
    $element_end.val(moment.unix(date.end).minute(end_minutes).format('DD/MM/YYYY HH:mm'));
};

clipit.task.loadTemplate = function(){
    var name = $(this).val();
    var content = $(".task-list"),
        total_tasks = clipit.task.countTemplateTasks(task_template[name]),
        start = $('input[name="activity-start"]').val(),
        end = $('input[name="activity-end"]').val(),
        diff = (moment(end, 'DD/MM/YYYY').hour(23).minute(59).unix() - moment(start, 'DD/MM/YYYY').minute(15).unix())/total_tasks;

    content.html('');
    var task_start = moment(start, 'DD/MM/YYYY').minute(15).unix();

    $.each(task_template[name].tasks, function (key, data) {
        var loading = $('<li class="list-item"><i class="fa fa-spinner fa-spin fa-2x blue-lighter" style="padding:15px;"/></li>').appendTo(content);
        $.get( "ajax/view/activity/create/task_list", function( result ) {
            loading.remove();
            var $task = $(result).appendTo(content),
                $main_task = $task.find('.main_task')
                date = {};
            $main_task.find('.input-task-title').val(clipit.task.echoTemplate(data.name));
            $main_task.find('.input-task-description').val(clipit.task.echoTemplate(data.description));
            $main_task.find('[data-task-type="'+ data.task_type +'"]').trigger('click');

            date.start = task_start,
            date.end = task_start + diff,
            task_start = date.end;
            clipit.task.setTemplateDates(date, $main_task.find('.input-task-start'), $main_task.find('.input-task-end'));

            // If feedback exists
            if(data.feedback != undefined){
                $task.find('.feedback-check input')
                    .prop('checked', true)
                    .closest('.feedback-check').trigger('click');
                var data_feedback = data.feedback,
                    $feedback_task = $task.find('.feedback_task');
                $feedback_task.find('.input-task-title').val(clipit.task.echoTemplate(data_feedback.name));
                $feedback_task.find('.input-task-description').val(clipit.task.echoTemplate(data_feedback.description));
                $feedback_task.find('[data-task-type="'+ data_feedback.task_type +'"]').trigger('click');
                date.start = task_start,
                date.end = task_start + diff,
                task_start = date.end;
                clipit.task.setTemplateDates(date, $feedback_task.find('.input-task-start'), $feedback_task.find('.input-task-end'));
            }

        });
    });
};//<script>
elgg.provide('clipit.admin');

clipit.admin.init = function() {
    $(document).on("click", ".submit-add-teachers", clipit.admin.addTeachers);
    $(document).on("click", ".submit-create-teachers", clipit.admin.createTeachers);
    $("#get-users").click(clipit.admin.getUsers);
};
elgg.register_hook_handler('init', 'system', clipit.admin.init);

clipit.admin.addTeachers = function(){
    var form = $(this).closest("form");
    form.append($("<input/>",{"type": "hidden", "name": "act"}).val("to_activity"));
    $(this).button('loading').data("loading-text", elgg.echo('loading')+ "...").button('loading');
    elgg.action('activity/admin/users', {
        data: form.serialize(),
        success: function(){
            location.reload();
        }
    });
};
clipit.admin.createTeachers = function() {
    var form = $(this).closest("form");
    $(this).button('loading').data("loading-text", elgg.echo('loading')+ "...").button('loading');
    elgg.action('activity/admin/users', {
        data: form.serialize(),
        success: function(){
            location.reload();
        }
    });
};
clipit.admin.getUsers = function(){
    var data_role = $(this).data("role"),
        data_activity = $(this).data("activity"),
        container = $("#shite ul") || $("#site select");
    switch(data_role){
        case "student":
            var container = $("#site ul");
            break;
        case "teacher":
            var container = $("#site select");
            break;
    }
    container.html($("<i class='fa fa-spinner fa-spin blue'/>"));
    elgg.action('activity/admin/users', {
        data: {act: "get_users", role: data_role, activity_id: data_activity},
        success: function(data){
            container.html("");
            $.each(data.output, function(i, user) {
                switch(data_role){
                    case "student":
                        var content = $("<li/>",{
                            "data-user": user.id,
                            "style": "padding: 2px;",
                            "class": "cursor-pointer list-item-5 searchable",
                        })
                            .html(user.avatar + " " + user.name);
                        break;
                    case "teacher":
                        var content = $("<option/>",{
                            "value": user.id,
                            "class": "searchable"
                        })
                            .text(user.name);
                        break;
                }
                container.append(content);
            });

            $('input#search-users').quicksearch(container.find(".searchable"));
        }
    });
};//<script>
elgg.provide('clipit.quiz');

clipit.quiz.init = function() {
    $(".finish-quiz").click(clipit.quiz.finishConfirmation);
    $('.chart, .questions').on('show.bs.collapse', clipit.task.admin.quiz.showData);
    $('.print-data').click(clipit.task.admin.quiz.printData);
    $('.compare-results').on('show.bs.collapse', clipit.task.admin.quiz.compareResults);
    $('.entity-action').click(clipit.task.admin.quiz.setAction);
};
elgg.register_hook_handler('init', 'system', clipit.quiz.init);
clipit.quiz.translated = function(){
    return elgg.echo();
};
clipit.quiz.saveQuestion = function(e){
    var $element = $(this);
    if(arguments[0].object){
       $element = arguments[0].object;
    }
    if($element.attr("type") == 'checkbox'){
        var $element = $(".quiz input[type=checkbox]");
    }
    var form = $element.closest("form"),
        form_data = form.find($element.add("input:hidden")).serialize(),
        $container = $element.closest(".question")
        answers = $container.find('.question-answer');
    $container.find(".loading-question").show();
    $container.find(".num-question").hide();
    form.find('.finish-quiz').prop('disabled', true);
    answers.find(':input, textarea').prop('disabled', true);
    elgg.action('quiz/take',{
        data: form_data,
        success: function(json) {
            form.find('.finish-quiz').prop('disabled', false);
            answers.find(':input, textarea').prop('disabled', false);
            $container.find(".loading-question").hide();
            $container.find(".num-question").show();
            $("#count-result").text(json.output);
            // if finished
            if (json.output == 'finished'){
                window.location.href = '';
            }
        }
    });
};
clipit.quiz.finishConfirmation = function(e){
    e.preventDefault();
    var that = $(this),
        type = $(this).data('type'),
        $modal = $( $(this).data('target') );
        $modal.find('.modal-title').text($("#questions-result").text());
    if(type) {
        switch (type) {
            case 'finish':
                that.after('<input type="hidden" name="finish" value="true" />');
                break;
            case 'save':
                break;
        }
        that.closest('form').submit();
    }
};
clipit.quiz.create = function(options){
    var defaults = {};
    var opt =  $.extend({}, defaults, options),
        that = $(opt.quiz),
        $quiz = $(opt.quiz),
        $question = that.find('.question');
    $questions = that.find('.questions');

    function Question(object){
        var self = this;
        this.question = object;
        this.question_type_selected;
        this._init = function(){
            // Reorder questions
            self.getNum();
            // Trigger events
            self.question.find(".remove-question").on("click", function(){
                return self.delete();
            });
            self.question.find(".clone-question").on("click", function(){
                return self.toClone();
            });
            $(self.question).on("click", ".results .remove-answer", function(e){
                var $answer = $(this).closest('.result');
                return self.answerRemove($answer);
            });
            self.question.find(".add-result").on("click", function(){
                self.question_type_selected = $(this).closest(".show-question");
                return self.addResult();
            });
            //self.question.find("input[type=radio]").on("click", function(){
            $(self.question).on("click", "input[type=radio]", function(){
                self.question.find(".results input[type=radio]").prop('checked', false);
                $(this).prop('checked', true);
            });
            // Tags chosen
            self.question.find(".tags-select").chosen({disable_search_threshold: 1});
            // jQuery UI slider
            self.difficultySlider( self.question.find(".difficulty-slider") );
            // Question types select
            self.question.find(".select-question-type").on("change", function(){
                var question_type = $("[data-question='"+$(this).val()+"']");
                self.question.find(".show-question").hide();
                if(self.question.find(question_type).length > 0) {
                    self.question.find(question_type).show();
                }
            });
            // Question Stumbling Blocks
            self.question.find(".select-all-tags").on("click", function(){
                var container = $(this).parent('div'),
                    isChecked = $(this).prop('checked');
                $(this).prop('disabled', true);
                container.find('input[type=checkbox]').click();
                container.find('input[type=checkbox]').prop('checked', isChecked);
                $(this).prop('disabled', false);
            });
            $(self.question).on("click", ".tags-list input[type=checkbox]", function(){
                var stumbling_block = $(this).val(),
                    table = self.question.find('.examples-list');
                if(!$(this).is(':checked')) {
                    table.find('tr[data-stumbling_block=' + stumbling_block + ']').remove();
                    if(table.find('tr[data-example]').length == 0){
                        table.hide();
                    }
                } else {
                    elgg.getJSON('ajax/view/questions/examples', {
                        data: {
                            'stumbling_block': stumbling_block
                        },
                        success: function (data) {
                            if(data.length > 0){
                                table.fadeIn();
                            }
                            $.each(data, function (i, item) {
                                if (table.find('tr[data-example=' + item.example + ']').length == 0) {
                                    table.find('tbody').append(
                                        $('<tr/>')
                                            .attr({
                                                'data-example': item.example,
                                                'data-stumbling_block': stumbling_block
                                            })
                                            .append('<td style="padding-top: 10px;" colspan="2">' + item.content + '</td>')
                                    ).show();
                                }
                            });
                        }
                    });
                }
            });
            // Examples from Stumbling Blocks
            $(self.question).on("click", ".examples-list .btn-reflection", function(){
                $(this).closest('td').find('.reflection-list').toggle();
            });
            self.question.find(".close-table").on("click", function(){
                $(this).closest('.examples-list').find('tbody').toggle();
            });
        };
        this.difficultySlider = function($elem){
            return $elem.slider({
                range: "min",
                value: $elem.find("input").val(),
                min: 1,
                max: 6,
                step: 1,
                create: function(event, ui){
                    $elem.find("a").append($("<span/>"));
                    var value = $elem.find("input").val();
                    if(value < 4){
                        $elem.find(".ui-slider-range").addClass("green");
                    }else if(value >= 4 && ui.value <= 5){
                        $elem.find(".ui-slider-range").addClass("yellow");
                    }else{
                        $elem.find(".ui-slider-range").addClass("red");
                    }
                },
                slide: function( event, ui ) {
                    $elem.find("a span" ).text( ui.value );
                    $elem.find("input" ).val( ui.value );
                    $elem.find(".ui-slider-range").removeClass().addClass("ui-slider-range");
                    if(ui.value < 3){
                        $elem.find(".ui-slider-range").addClass("green");
                    }else if(ui.value >= 3 && ui.value <= 4){
                        $elem.find(".ui-slider-range").addClass("yellow");
                    }else{
                        $elem.find(".ui-slider-range").addClass("red");
                    }
                }
            });
            $elem.find(" a span" ).text(  $(this).find("input").val() );
        };
        this.create = function(from_tag, value){
            if(!value && !from_tag){
                var from_tag = false,
                    value = null;
            }

            elgg.get('ajax/view/activity/admin/tasks/quiz/add_type',{
                data: {
                    type: "question",
                    tricky_topic: opt.tricky_topic,
                    question: value,
                    num: $question.length + 1,
                    input_prefix: opt.input_prefix
                },
                success: function(content){

                    var $content = $($.parseHTML(content));
                    if($quiz.find(".question").length > 0 ){
                        $quiz.find(".questions").append($content);
                    } else {
                        $quiz.find(".questions").html($content);
                    }

//                    self.question = $content; // debug
                    // Set question object
//                    self.question = $quiz.find(".questions .question:last");
                    var q = new Question($quiz.find(".questions .question:last"));
                    q.question.find('input[type=text]:first').focus();
                    if(from_tag){
                        var question_type = self.question.find(".select-question-type").val();
                        q.question.find("[data-question='" + question_type + "']").show();
                        q.question.find("textarea").click();
                        $quiz.find('.questions-select')
                            .val('')
                            .trigger('chosen:updated');
                    }
                    return q._init();
                }
            });
        };
        this.toClone = function(){
            var question_clone = self.question.clone(),
                old_id  = question_clone.find('.input-uniqid').val(),
                new_id = old_id + Math.floor(Math.random(0,120)*100);

            question_clone.find('.input-id, .input-id-parent').remove();

            question_clone.find('[name*="'+old_id+'"], [id*="'+old_id+'"]').each(function() {

                if($(this).attr('name')){
                    $(this).attr('name', $(this).attr('name').replace(old_id, new_id));
                }
                if($(this).is('select')){
                    $(this).val( self.question.find('.select-question-type').val() ); // change to original value
                }
                if($(this).hasClass('mceEditor')) {
                    var old_textarea_id = $(this).attr('id'),
                        new_textarea_id = old_textarea_id.replace(old_id, new_id);

                    question_clone.find('.mce-container').remove();
                    $(this).show().val('');
                    $(this).attr('id', new_textarea_id);
                    clipit.tinymce(new_textarea_id);
                }
                if($(this).hasClass('show-question')){
                    $(this).attr('id', $(this).attr('id').replace(old_id, new_id));
                }

            });
            self.question.after(question_clone);
            question_clone.find('input[type=text]:first').focus();
            var q = new Question( question_clone );
            return q._init();
        };
        this.delete = function(){
            self.question.remove();
            return self.getNum();
        };
        this.getNum = function(){
            self.sortableOrder();
            return $quiz.find(".question").each(function(i){
                $(this).find(".question-num").text((i+1) + ".");
                $(this).find(".input-order").val(i+1);
            });
        };
        this.answersCount = function($answer){
            return $answer.closest('.results').find('.answer-result').length;
        };
        this.answerType = function(){
            return self.question.find('select.select-question-type').val();
        };
        this.answerRemove = function($answer){
            var error_msg = false;
            switch (self.answerType()){
                case 'select_one':
                    if(self.answersCount($answer) > 2)
                        $answer.remove();
                    else
                        error_msg = true;
                    break;
                case 'select_multi':
                    if(self.answersCount($answer) > 1)
                        $answer.remove();
                    else
                        error_msg = true;
                    break;
            }
            if(error_msg) {
                elgg.register_error(elgg.echo('quiz:question:answer:cantremove'))
            }

            return false;
        };
        this.addResult = function(){
            self.question_type_selected.find('.loading').show();
            return elgg.get('ajax/view/activity/admin/tasks/quiz/add_type',{
                data: {
                    type:   self.question_type_selected.data("question"),
                    id:     self.question_type_selected.attr("id"),
                    num:    self.question_type_selected.find(".result").length + 1,
                    input_prefix: opt.input_prefix
                },
                success: function(content){
                    self.question_type_selected.find('.loading').hide();
                    self.question_type_selected
                        .find(".results")
                        .append(content)
                        .find("input")
                        .focus();
                }
            });
        };
        this.sortableOrder = function(){
            return $questions.sortable({
                dropOnEmpty: true,
                handle: '.reorder-question',
                update: function(event, ui) {
                    self.getNum();
                }
            });
        }
    };
    // Select Tricky Topic
    var previous_value = '';
    $quiz.find(".select-tricky_topic").focus(function() {
        <!--    $quiz.on("focus", ".select-tricky_topic", function(e){-->
        previous_value = $(this).val();
    }).change(function() {
        var tricky_topic = $quiz.find(".select-tricky_topic option:selected").val();
        $quiz.find(".add-question").hide();
        if(tricky_topic == ''){
            return false;
        }

        opt.tricky_topic = tricky_topic;
        $quiz.find(".add-question").show();
        if($quiz.find(".question").length > 0){
            var confirmOptions = {
                title: elgg.echo("question:areyousure"),
                buttons: {
                    confirm: {
                        label: elgg.echo("input:yes")
                    },
                    cancel: {
                        label: elgg.echo("input:no"),
                        className: "btn-border-blue btn-default"
                    }
                },
                message: elgg.echo('quiz:tricky_topic:danger'),
                callback: function(result) {
                    if(result) {
                        $quiz.find(".questions").html("");
                        $quiz.find(".dynamic-table").html("").hide();
                    } else {
                        $quiz.find(".select-tricky_topic option[value="+previous_value+"]").prop("selected", true);
                    }
                }
            };
            bootbox.confirm(confirmOptions);
        }
    });
    // Create a Question button
    that.find(".create-question").bind("click",function() {
        var q = new Question($(this));
        return q.create();
    });
    that.on("click", ".get-clones", function(){
        var tr = $(this).closest("tr")
        id = $(this).attr("id"),
            tr_clones = $("[data-clone="+id+"]");
        if(tr_clones.length > 0){
            tr_clones.toggle();
            return false;
        }
        elgg.get('ajax/view/activity/admin/tasks/quiz/add_type',{
            data: {
                type: "question_list_clone",
                id: id
            },
            success: function(content){
                tr.after(content);
            }
        });
    });
    // Question select from tag
    $quiz.on("click", ".from-tags", function(){
        <!--    that.on("click", ".from-tags", function(){-->
        var $that = $(this);
        $quiz.find(".dynamic-table").toggle();
        if($quiz.find("table.datatable").length > 0){
            return false;
        }
        elgg.get('ajax/view/activity/admin/tasks/quiz/add_type',{
            data: {
                type:   'question_list_from_tags',
                tricky_topic: opt.tricky_topic,
                input_prefix: opt.input_prefix
            },
            success: function(content){
                $content = $(content);
                $quiz.find(".dynamic-table").html($content);
                $content.find("table.datatable").dynatable({
                    features: {pushState: false},
                    dataset: {
                        sorts: { dnumber: 1 },
                        perPageDefault: 10
                    },
                    params: {
                        records: 'filas'
                    },
                    inputs: {
                        queries: $('.search-difficulty'),
                        queryEvent: 'blur change keyup',
                        paginationClass: 'pagination',
                        paginationLinkClass: 'cursor-pointer',
                        paginationActiveClass: 'active',
                        paginationDisabledClass: 'disabled',
                        pageText: elgg.echo('pages')+': ',
                        searchText: '',
                        perPageText: elgg.echo('show')+':',
                        paginationPrev: elgg.echo('prev'),
                        paginationNext: elgg.echo('next'),
                        recordCountText: elgg.echo('showing'),
                        recordCountPageBoundTemplate: '{pageLowerBound} '+elgg.echo('to')+' {pageUpperBound} '+elgg.echo('of'),
                        recordCountPageUnboundedTemplate: '{recordsShown} '+elgg.echo('of')
                    }
                });
                $content.find(".dynatable-search input")
                    .attr("placeholder", elgg.echo('search'))
                    .addClass('form-control')
                    .css({"width": "auto", "display": "inline-block"});
            }
        });
    });
    that.on("click", ".questions-select", function(){
        var q = new Question($(this));
        q.create(true, $(this).attr("id"));
    });
    return $quiz.find(".question").each(function(){
        var q = new Question();
        q.question = $(this);
        q._init();
    });
};

/**
 * Clipit Quiz admin task
 */
elgg.provide('clipit.task.admin.quiz');
clipit.task.admin.quiz.init = function() {
    $(document).on("click", ".save-annotation", clipit.task.admin.quiz.saveAnnotation);
};
elgg.register_hook_handler('init', 'system', clipit.task.admin.quiz.init);

clipit.task.admin.quiz.setAction = function (){
    var action = $(this).data('action'),
        $entity = $(this).closest('[data-entity]'),
        id = $entity.data('entity'),
        $quiz = $(this).closest('[data-quiz]');
    elgg.get("ajax/view/quizzes/admin/results", {
        data: {
            quiz: $quiz.data('quiz'),
            type: 'action',
            action_type: action,
            entity_id: id
        },
        success: function (data) {
            $entity.find('.counts').html('');
            $entity.find('.msg-not-finished').text(data);
        }
    });
};

clipit.task.admin.quiz.showChart = function(e){
    var that = $(this),
        user_id = that.closest('li').data('entity'),
        content = that.closest('li').find('.chart');
    if(content.is(':empty')) {
        content.html('<i class="fa fa-spinner fa-spin fa-2x blue"></i>');
        elgg.get("ajax/view/quizzes/admin/results", {
            data: {
                quiz: e.data.quiz,
                type: 'chart',
                user: user_id
            },
            success: function (data) {
                content.html(data);
            }
        });
    }
};
clipit.task.admin.quiz.showData = function(e){
    var that = $(this),
        $item = $('a[href="#'+ that.attr('id') +'"]')
        quiz_id = $item.closest('#quiz-admin').data('quiz'),
        id = $item.attr('href'),
        entity_id = $item.closest('li').data('entity');
    if(that.is(':empty')) {
        that.html('<i class="fa fa-spinner fa-spin fa-2x blue"></i>');
        elgg.get("ajax/view/quizzes/admin/results", {
            data: {
                quiz: quiz_id,
                type: 'result_'+ $item.data('entity-type'),
                entity: entity_id,
                entity_type: $item.data('type')
            },
            success: function (data) {
                var result = that.html(data);
                // Print mode
                if (e.data != undefined) {
                    if ($item.data('entity-type') == 'questions') {
                        // Show all results of each question
                        result.find('.question-result').collapse('show');
                    }
                    if ((e.data.count == e.data.total)) {
                        setTimeout(function(){
                            $('.bootbox').modal('hide');
                            window.print();
                        }, 1000);
                    }
                }
            }
        });
    }
};
clipit.task.admin.quiz.printData = function (){
    var alertOptions = {
        backdrop: 'static',
        keyboard: true,
        title: elgg.echo(elgg.echo('loading')+"..."),
        buttons: {
            ok: {
                className: "hide"
            }
        },
        message: elgg.echo('quiz:print:alert')
    };
    bootbox.alert(alertOptions);
    var i = 0,
        tab = $('#quiz-admin .tab-pane.active'),
        $elements = tab.find('.results'),
        total = $elements.length;
    $elements.each(function(){
        i++;
        if($(this).hasClass('collapse')) {
            $(this).on('show.bs.collapse',
                {'print': true, 'count': i, 'total': total},
                clipit.task.admin.quiz.showData
            ).collapse('show');
        } else {
            if(i == total ){
                setTimeout(function(){
                    $('.bootbox').modal('hide');
                    window.print();
                }, 3000);
            }
        }
    });
};
clipit.task.admin.quiz.compareResults = function (){
    var that = $(this),
        quiz_id = that.closest('#quiz-admin').data('quiz');
    if(that.is(':empty')) {
        that.html('<i class="fa fa-spinner fa-spin fa-2x blue"></i>');
        var url = elgg.config.wwwroot + '/ajax/view/quizzes/admin/results?quiz='+quiz_id+'&type=compare_results&entity_type='+ that.data('entity-type');
        var iframe = $('<iframe />');
        iframe
            .attr('src', url)
            .attr('frameborder', 0)
            .css({
                'width': '100%'
            })
            .load( function () {
                var c = (this.contentWindow || this.contentDocument);
                if (c.document) d = c.document;
                $(this).css({
                    height: $(d).outerHeight(),
                }).fadeIn('slow');
            });
        that.html(iframe);
    }
};
clipit.task.admin.quiz.onShowTab = function(e){
    var id = $(this).attr('href'),
        container = $(id).find('li[data-entity]');
    if(container.find('.status').is(':hidden')) {
        elgg.get("ajax/view/quizzes/admin/results", {
            dataType: "json",
            data: {
                quiz: e.data.quiz,
                count: true,
                type: id.replace('#', '')
            },
            success: function (output) {
                $.each(output, function (i, data) {
                    container.eq(i).find('.loading').remove();

                    if(data.not_finished) {
                        container.eq(i).find(".msg-not-finished").text(data.not_finished);
                    } else {
                        container.eq(i).find(".counts").show();
                        container.eq(i).find(".a-correct").text(data.correct);
                        container.eq(i).find(".answered").html(data.answered);
                    }
                });
            }
        });
    }
};
clipit.task.admin.quiz.saveAnnotation = function(){
    var container = $(this).parent(".annotate"),
        form = $(this).closest("form");
    tinymce.triggerSave();
    elgg.action(form.attr("action"), {
        data: form.serialize(),
        success: function(){
            container.slideToggle();
        }
    });
};//<script>
elgg.provide('clipit.discussion');
clipit.discussion.init = function() {
    // Discussion quote click
    $(document).on("click", ".quote-ref", clipit.discussion.getQuote);
    // Set quote reference to text editor
    $(".msg-quote").click(clipit.discussion.setQuote);
};
elgg.register_hook_handler('init', 'system', clipit.discussion.init);

/**
 * Get quote from reference id for discussion posts
 */
clipit.discussion.getQuote = function(){
    var quote_id = $(this).data("quote-ref");
    var parent = $(this).closest("div");
    var $obj = $(this);
    var quote_content = parent.find(".quote-content[data-quote-id="+quote_id+"]");

    if(quote_content.length == 0){
        $(this).addClass("active");
        $(this).after("<div class='quote-content' data-quote-id='"+quote_id+"'></div>");
        var quote_content = parent.find(".quote-content[data-quote-id="+quote_id+"]");
        quote_content.html("<a class='loading'><i class='fa fa-spinner fa-spin'></i> "+elgg.echo('loading')+"...</a>");
        var message_id = $(this).closest(".discussion-reply-msg").data("message-destination");
        elgg.get("ajax/view/discussion/quote", {
            data: { quote_id : quote_id, message_destination_id : message_id},
            success: function(data){
                quote_content.html(data);
            }
        });
    } else {
        parent.find(".quote-content[data-quote-id="+quote_id+"]").toggle(1,function(){
            $obj.toggleClass("active");
        });
    }
};
/*
 * Discussion comment reference
 */
clipit.discussion.setQuote = function() {
    var editor = tinyMCE.editors['mceEditor'];
    editor.execCommand('mceInsertContent', false, this.innerText + '&nbsp;');
    var form = editor.formElement;

    $('html, body').animate({
        scrollTop: $(form).offset().top
    }, 50);
};$(function(){
});
//<script>
elgg.provide('clipit.activity');

clipit.activity.init = function() {
    $(document).on("click", ".option-select", clipit.activity.addUserToggleOptions);
    $(document).on("click", "#add_user", clipit.activity.addFormUser);
};
elgg.register_hook_handler('init', 'system', clipit.activity.init);

clipit.activity.addUserToggleOptions = function() {
    var view = $(this).data("toggle");
    $(".option-content").hide();
    $("#"+ view).show();
};
clipit.activity.addFormUser = function() {
    var content = $(".add-user-list");
    elgg.get( "ajax/view/user/add", function( data ) {
        content.append(data).find(".focus-in").focus();
    });
};

function selected_count(){
    var count_selected = $("#called_users option:selected").length;
    $(".ms-selection h4").find("span").text(count_selected);
    var count_selectable = $("#called_users option:not(:selected)").length;
    $(".ms-selectable h4").find("span").text(count_selectable);
}//<script>
elgg.provide('clipit.tricky_topic');

clipit.tricky_topic.init = function() {
    $(".input-tag").autocomplete(clipit.tricky_topic.tagsAutocomplete());
    $(document).on("click", "#add-tag", clipit.tricky_topic.addTag);

    $(document).on("keypress", ".form-add-tags input[type=text]", clipit.tricky_topic.onKeypressTag);
    $(document).on(clipit.tricky_topic.onReflectionItemShow(), ".reflection-item label");
    $(document).on("click", ".add-input", clipit.tricky_topic.addInput);
    $(document).on("click", ".remove-input", clipit.tricky_topic.removeInput);
    $(document).on("click", ".show-examples", clipit.tricky_topic.showExamples);
    $(document).on("change", ".clone-input input:file", clipit.tricky_topic.checkFileAdd);
};
elgg.register_hook_handler('init', 'system', clipit.tricky_topic.init);

clipit.tricky_topic.tagsAutocomplete = function(){
    return {
        source: function (request, response) {
            elgg.getJSON(
                "ajax/view/tricky_topics/tags/search", {
                    data: {q: request.term},
                    success: function (data) {
                        response(data);
                    }
                }
            );
        },
        open: function () {
            $(this).data("ui-autocomplete").menu.element
                .addClass("tags-autocomplete")
                .css("display", "inline-block");
        },
        select: function (event, ui) {
            event.preventDefault();
            this.value = ui.item.label;
        },
        focus: function (event, ui) {
            event.preventDefault();
            this.value = ui.item.label;
        },
        minLength: 2
    };
};
clipit.tricky_topic.link = function(e) {
    $(this).toggle();
    var content = e.data.content,
        container = $(this).closest("td").find(".list-tricky-topic");
    container.toggle().html(content);
    container.find("form .input-entity-id").val($(this).attr("id"));
    container.find('form option').each(function(){
        var text = $(this).text()
        if (text.length > 30)
            $(this).val(text).text(text.substr(0,30)+'...')
    });
};
clipit.tricky_topic.addTag = function(){
    var container = $(this).closest('.prototype-container');
    container.find(".input-tag:last").focus().autocomplete(clipit.tricky_topic.tagsAutocomplete());
};
clipit.tricky_topic.onKeypressTag = function(e){
    var last_char = String.fromCharCode(e.which);
    if(e.keyCode == 13 || last_char == ',') {
        e.preventDefault();
        $(this).closest('form').find('#add-tag').click();
        return false;
    }
};
clipit.tricky_topic.onReflectionItemShow = function(){
    return {
        mouseenter: function () {
            var container = $(this).closest(".reflection-item");
            container.find(".reflect-description").hide();
            container.find("[data-reflect_item="+$(this).attr("id")+"]").show();
        },
        mouseleave: function () {
            var container = $(this).closest(".reflection-item");
            container.find(".reflect-description").hide();
            container.find(".reflect-description:first").show();
        }
    };
};
clipit.tricky_topic.addInput = function(){
    var container = $(this).closest(".form-group").find(".group-input"),
        input_clone = container.find('.clone-input:last').clone();
    input_clone.find('input').val('');
    input_clone.find('.correct').hide();
    input_clone.find('.remove-input').css('visibility', 'visible');

    if($(this).hasClass('collapse-type')){
        input_clone.find(".in").removeClass('in').addClass('collapse');
        $( input_clone.find('[data-toggle="collapse"]') ).each(function(){
            var btn_collapse = $(this),
                num = (btn_collapse.attr('href').replace('#collapse_', ''));
            var container_collapse = input_clone.find('#collapse_'+ num);
            container_collapse.attr('id', 'collapse_' + (num+1) );
            btn_collapse.attr('href', '#collapse_' + (num+1) );
        });
        var num_panel = parseInt(input_clone.find('.panel-group').attr('id').replace('panel_', ''));
        input_clone.find('.panel-group').attr('id', 'panel_' + (num_panel+1) );
        input_clone.find('[data-toggle="collapse"]').attr('data-parent', '#panel_' + (num_panel+1) );
    }
    container.append(input_clone);
};
clipit.tricky_topic.checkFileAdd = function(){
    var check = $(this).closest('.clone-input').find('.correct');
    if($(this).val() != ''){
        check.show();
    } else {
        check.hide();
    }
};
clipit.tricky_topic.removeInput = function(){
    $(this).closest('.clone-input').remove();
};
clipit.tricky_topic.showExamples = function(){
    var tr = $(this).closest("tr")
    id = $(this).attr("id"),
        tr_example = $("[data-tag="+id+"]");
    if(tr_example.length > 0){
        tr_example.toggle();
        return false;
    }
    elgg.get('ajax/view/examples/summary',{
        data: {
            stumbling_block: id
        },
        success: function(content){
            var container = $("<tr/>")
                .attr("data-tag", id)
                .html( $('<td/>').attr("colspan", 5).html(content).css("padding", "10px") );
            tr.after(container);
        }
    });
};


